// Code generated by dagger-compiler.  Do not edit.
package com.pedrocactus.topobloc.app.ui;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binder<MapFragment>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code MapFragment} and its
 * dependencies.
 * 
 * Being a {@code Provider<MapFragment>} and handling creation and
 * preparation of object instances.
 * 
 * Being a {@code MembersInjector<MapFragment>} and handling injection
 * of annotated fields.
 */
public final class MapFragment$$InjectAdapter extends Binding<MapFragment>
    implements Provider<MapFragment>, MembersInjector<MapFragment> {
  private Binding<com.path.android.jobqueue.JobManager> jobManager;

  public MapFragment$$InjectAdapter() {
    super("com.pedrocactus.topobloc.app.ui.MapFragment", "members/com.pedrocactus.topobloc.app.ui.MapFragment", NOT_SINGLETON, MapFragment.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    jobManager = (Binding<com.path.android.jobqueue.JobManager>) linker.requestBinding("com.path.android.jobqueue.JobManager", MapFragment.class);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(jobManager);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<MapFragment>}.
   */
  @Override
  public MapFragment get() {
    MapFragment result = new MapFragment();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<MapFragment>}.
   */
  @Override
  public void injectMembers(MapFragment object) {
    object.jobManager = jobManager.get();
  }
}
